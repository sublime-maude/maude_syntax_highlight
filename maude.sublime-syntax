%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
name: Maude
file_extensions: [maude, ]
scope: source.maude

contexts:

  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    - include: entity
    - include: strings
    - include: keywords
    - include: storage
    - include: constant
    - include: operators

  entity:
    - match: (rl|crl)
      scope: keyword.control.statements.maude
    - match: \[
      push: rule_label

  rule_label:
    - meta_content_scope: entity.name.function.maude
    - match: ([A-Za-z0-9-_!&^@#=$%*'+~/\\|?<>:;]*)
    - match: \]
      pop: true
    - match: .
      scope: invalid.illegal

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.maude
      push: double_quoted_string

  double_quoted_string:
    - meta_scope: string.quoted.double.maude
    - match: '\\.'
      scope: constant.character.escape.maude
    - match: '"'
      scope: punctuation.definition.string.end.maude
      pop: true

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.

    - match: '\b(mod|fmod|omod|endm|endfm|endm|is)\b'
      scope: keyword.control.module.maude

    - match: '\b(protecting|including|extending)\b'
      scope: keyword.control.imports.maude

    - match: '\b(sort|subsort|sorts|subsorts)\b'
      scope: keyword.control.sorts.maude

    - match: '\b(op|ops|var|vars|eq|ceq|rl|crl|cmb|reduce|red|rewrite|rew)\b'
      scope: keyword.control.statements.maude

    - match: '\b(if|else|for|while)\b'
      scope: keyword.control.flow.maude

  storage:
    - match: '\b(Bool|Nat|Zero|NzNat|Int|NzInt|Rat|PosRat|NzRat|Float|FiniteFloat|String|Char|Qid|List\{.+\}|NeList\{.+\}|NatList|Bool|Universal)\b'
      scope: storage.type.maude

  constant:
    - match: '\b(true|false|nil)\b'
      scope: constant.language.maude

    - match: '\b([0-9]+)\b'
      scope: constant.numeric.maude

  operators:
    - match: '(:|(\-\>)|=|\/\\|\<|\>)|(\.)'
      scope: keyword.operator.maude


  comments:
    # block comments begin with ***( and end with ) The book sais that block
    # comments should allways start with ***, but --- also works as block
    # comments, which I also feel is more natural
    # ref end of section 2.2 https://maude.lcc.uma.es/maude321-manual-html/maude-manualch2.html
    - match: (((\*\*\*)|(\-\-\-))\s*\()
      captures:
        1: punctuation.definition.comment.begin.block.maude
      push: block_comment

    # single line comments begin with *** or ---
    - match: (\*\*\*)|(\-\-\-)
      scope: punctuation.definition.comment.begin.line.maude
      push: line_comment

  line_comment:
    - meta_scope: comment.line.maude
    - match: '\n'
      pop: true

  block_comment:
    - meta_scope: comment.block.maude
    - match: '`.'
      scope: constant.character.escape.maude
    - match: '\('
      push: comment_presesis
    - match: '\)'
      scope: punctuation.definition.comment.end.block.maude
      pop: true

  comment_presesis:
    - match: '\('
      push: comment_presesis
    - match: '\)'
      pop: true
