%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
name: Maude
file_extensions: [maude, ]
scope: source.maude


# we need to remove the:
# - ` (back quote character) \x96
# - {} \x7B \x7D
# - () \x28 \x29
# - [] \x5B \x5D
# - , (comma) \x82

variables:
  special_chars: '[\`\{\}\(\)\[\]\,]'
  # escaped_chars: '(?:`\{|`\}|`\(|`\)|`\[|`\]|`\,|` )'
  escaped_chars: '((`\{)|(`\})|(`\()|(`\))|(`\[)|(`\])|(`\,)|(` ))'
  nonspecial_chars: '[\x00-\x19\x21-\x27\x30-\x5A\x5C\x5E\x5F\x61-\x7A\x7C\x7E-\x7F]'
  all_valid_chars: '{{nonspecial_chars}}{{escaped_chars}}'
  identifier_continue: '[{{all_valid_chars}}]'
  identifier: '\b[{{all_valid_chars}}]{{identifier_continue}}*\b'
  identifiers: '\b{{identifier}}({{identifier}}{{special_chars}})*'

  OpId: '(_)?[{{identifier}}](_)?|__[{{identifier}}]|[{{identifier}}]__'
  OpForm: '({{OpId}}|(\s*\(\s*{{OpId}}\s*\)\s*))+'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    - meta_include_prototype: false
    - match: ''
      push: [statements, ]

  statements:
    - include: rule
    - include: operators
    - include: strings
    - include: keywords
    - include: storage
    - include: constant
    - include: logical_operators

  operators:
    - match: (op|ops)\b
      scope: keyword.control.maude punctuation.operation.start
      push:
        - meta_scope: meta.operator.maude
        - match: '\.'
          scope: keyword.operator.maude punctuation.operation.end
          pop: true
        - match: \s
        - match: '(\:)'
          scope: keyword.operator.maude
          push: operators_args
          pop: true
        - match: "(?={{identifier}})"
          push:
            - meta_content_scope: entity.name.function.maude
            - include: entity-name-function
            - match: ''
              pop: true
        # scope: entity.name.function.maude
        # skip the space before and anything until :
        # - match: \b([^:]*)\b
        #   scope: entity.name.function.maude

  entity-name-function:
    - include: generic-names

  generic-names:
    - match: '{{identifier}}'
      scope: meta.generic-name.maude

  # generic-name:
  #   - match: '{{identifier}}'
  #     scope: meta.generic-name.maude
  #     pop: true

  operators_args:
    - match: (->)
      scope: keyword.operator.total-operatior.maude
      push: operators_signature
      pop: true
    - match: (~>)
      scope: keyword.operator.partiell-operatior.maude
      push: operators_signature
      pop: true
    - match: \S+
      meta_content_scope: meta.function.parameters.python
      scope: variable.parameter.maude

  operators_signature:
    - match: \[
      scope: punctuation.operation.extra.start
      push:
        - match: ' '
        - match: ctor
          scope: keyword.control.ctor.maude
        - match: assoc
          scope: keyword.control.assoc.maude
        - match: comm
          scope: keyword.control.comm.maude
        - match: (left |right )?id
          scope: keyword.control.idendtity.maude
          push:
            - match: ": "
            - match: ([A-Za-z0-9-_!&^@#=$%*'+~/\\|?<>:;]*)
              pop: true
        - match: format
          scope: keyword.control.format.maude
          push:
            - match: \(
              scope: meta.format.start_parenthesis
              set:
              - match: \)
                scope: meta.format.end_parenthesis
                pop: true

        - match: \]
          scope: punctuation.operation.extra.end
          pop: true
        - match: .
          scope: invalid.illegal
    - match: \.
      scope: keyword.operator.maude punctuation.operation.end
      pop: true
    - match: \S+
      scope: variable.parameter.maude

  rule:
    - match: (rl|crl)
      scope: keyword.control.statements.maude
    - match: \[
      push: rule_label

  rule_label:
    - meta_content_scope: entity.name.function.maude
    - match: ([A-Za-z0-9-_!&^@#=$%*'+~/\\|?<>:;]*)
    - match: \]
      pop: true
    - match: .
      scope: invalid.illegal

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.maude
      push: double_quoted_string

  double_quoted_string:
    - meta_scope: string.quoted.double.maude
    - match: '\\.'
      scope: constant.character.escape.maude
    - match: '"'
      scope: punctuation.definition.string.end.maude
      pop: true

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.

    - match: '\b(mod|fmod|omod|endm|endfm|endm|is)\b'
      scope: keyword.control.module.maude

    - match: '\b(protecting|including|extending)\b'
      scope: keyword.control.imports.maude

    - match: '\b(sort|subsort|sorts|subsorts)\b'
      scope: keyword.control.sorts.maude

    - match: '\b(var|vars|eq|ceq|cmb|reduce|red|rewrite|rew)\b'
      scope: keyword.control.statements.maude

    - match: '\b(if|then|else|fi|for|while)\b'
      scope: keyword.control.flow.maude

    - match: '=\>'
      scope: keyword.control.maude

  storage:
    - match: '\b(Bool|Nat|Zero|NzNat|Int|NzInt|Rat|PosRat|NzRat|Float|FiniteFloat|String|Char|Qid|List\{.+\}|NeList\{.+\}|NatList|Bool|Universal)\b'
      scope: storage.type.maude

  constant:
    - match: '\b(true|false|nil)\b'
      scope: constant.language.maude

    - match: '\b([0-9]+)\b'
      scope: constant.numeric.maude

  logical_operators:
    - match: (\.\s*$)
      scope: keyword.operator.maude meta.logical_operators.maude
    - match: ':'
      scope: keyword.operator.maude meta.logical_operators.maude
    - match: '->'
      scope: keyword.operator.maude meta.logical_operators.maude
    - match: '=='
      scope: keyword.operator.maude meta.logical_operators.maude
    - match: '=/='
      scope: keyword.operator.maude meta.logical_operators.maude
    - match: '\/\\' # /\ Locical and
      scope: keyword.operator.maude meta.logical_operators.maude
    - match: '\\\/' # /\ Locical or
      scope: keyword.operator.maude meta.logical_operators.maude
    - match: '=\>'
      scope: keyword.operator.maude meta.logical_operators.maude
    - match: '\<='
      scope: keyword.operator.maude meta.logical_operators.maude
    - match: '\>='
      scope: keyword.operator.maude meta.logical_operators.maude
    - match: '\<'
      scope: keyword.operator.maude meta.logical_operators.maude
    - match: '\>'
      scope: keyword.operator.maude meta.logical_operators.maude

  comments:
    # block comments begin with ***( and end with )
    - match: '\*\*\*\('
      scope: punctuation.definition.comment.block.begin.maude
      push: line_block

    # single line comments begin with *** or ---
    - match: '\*\*\*[^\(]'
      scope: punctuation.definition.comment.line.maude
      push: line_comment

    - match: '\-\-\-'
      scope: punctuation.definition.comment.line.maude
      push: line_comment


  line_comment:
    - meta_scope: comment.line.maude
    - match: '\n'
      pop: true

  line_block:
    - meta_scope: comment.block.maude
    - match: '\s*\)\s*\n'
      scope: punctuation.definition.comment.end.maude
      pop: true

