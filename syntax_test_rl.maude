*** SYNTAX TEST "maude.sublime-syntax"

    crl [separation-init-12] :
*** ^^^ keyword.control.statements.maude
***      ^^^^^^^^^^^^^^^^^^ entity.name.function.maude
***                          ^ keyword.operator.maude

    rl [separsationInit] :
*** ^ keyword.control.statements.maude
***     ^^^^^^^^^^^^^^^ entity.name.function.maude
***                      ^ keyword.operator.maude
    crl [birth] :
*** ^^^ keyword.control.statements.maude
***      ^^^^^ entity.name.function.maude
***             ^ keyword.operator.maude


    crl [!^-_-@#!@#$%^&*+'~/\|?<>:;1234567890123] :
*** ^^^ keyword.control.statements.maude
***      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ entity.name.function.maude - invalid.illegal

    crl [this is illegal üëç(){}[`]] :
*** ^^^ keyword.control.statements.maude
***      ^^^^^^^^^^^^^^^^^^^^^^^ entity.name.function.maude
***          ^ invalid.illegal
***             ^ invalid.illegal
***                     ^^^^^^^^ invalid.illegal
***                                ^ keyword.operator.maude

    crl [rules_with_] : _wil_have_a_bad_time] .
*** ^^^ keyword.control.statements.maude
*** can't do much with this since this could be a valid program



    crl [iliegea_to_have"in_the_name_It_actuale_work_you_you_have_them_in_par"] :
*** ^^^ keyword.control.statements.maude
***                     ^ invalid.illegal
***                                                                          ^ invalid.illegal
*** This should have been valid but we don't want to bother with supporting that

    --- Player gets his second card and starts the real game:
    rl [playerSecond] :
       < T : Table | shoe : CARDS, rndIndex : N >
       < P : Player | hand : CARD >
       < D : Dealer | hand : CARD2 >
     =>
***  ^^ keyword.control.maude
       < T : Table | shoe : remove(getRandomCard(CARDS, N), CARDS), rndIndex : s N, turn : P >
       < P : Player | hand : CARD :: getRandomCard(CARDS, N) >
       < D : Dealer | > .

     crl [playerStand] :
         < T : Table | turn : P >
         < P : Player | hand : CARDS2 >
         < D : Dealer | >
       =>
***    ^^ keyword.control.maude
         < T : Table | turn : D >
         < P : Player | >
         < D : Dealer | >
        if leastValue(CARDS2) >= 15 or boestValue(CARDS2) >= 18 .
